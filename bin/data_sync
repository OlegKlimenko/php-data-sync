<?php
//----------------------------------------------------------------------------------------------------------------------
use SetBased\Affirm\ErrorHandler;
use SetBased\DataSync\DataSync;

//----------------------------------------------------------------------------------------------------------------------
$files = [__DIR__.'/../vendor/autoload.php',
          __DIR__.'/../../vendor/autoload.php',
          __DIR__.'/../../../vendor/autoload.php',
          __DIR__.'/../../../../vendor/autoload.php'];

foreach ($files as $file)
{
  if (file_exists($file))
  {
    require $file;
    break;
  }
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Prints the synopsis of this program and terminates this program.
 */
function synopsis()
{
  echo "Synopsis: data_sync [-c] <configuration file> [--dump-master-data] <dump master file>\n";
  echo "\n";
  echo "Options:\n";
  echo "  -h --help    : Print this help text.\n";

  exit(1);
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Parses the arguments of this program.
 *
 * @param array $options The arguments of this programs (i.e. $argv).
 *
 * @return array The parameters.
 * @throws Exception
 */
function getSetting($options)
{
  // skip first key with current file name.
  array_shift($options);
  $setting['--dump-master-data'] = false;

  while (($param = array_shift($options))!==null)
  {
    switch ($param)
    {
      case '-h':
      case '--help':
        synopsis();
        break;
      case '-c':
      case '--config':
        $setting['config'] = array_shift($options);
        break;
      case '--dump-master-data':
        $setting['dump-master-data'] = array_shift($options);
        break;
      default:
        synopsis();
        break;
    }
  }

  if (!isset($setting['config'])) synopsis();
  if (!isset($setting['dump-master-data'])) synopsis();

  return $setting;
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Returns the error string of the last json_encode() or json_decode() call.
 *
 * json_last_error_msg is defined in php 5.5.
 */
if (!function_exists('json_last_error_msg'))
{
  function json_last_error_msg()
  {
    static $errors = [
      JSON_ERROR_NONE           => null,
      JSON_ERROR_DEPTH          => 'Maximum stack depth exceeded',
      JSON_ERROR_STATE_MISMATCH => 'Underflow or the modes mismatch',
      JSON_ERROR_CTRL_CHAR      => 'Unexpected control character found',
      JSON_ERROR_SYNTAX         => 'Syntax error, malformed JSON',
      JSON_ERROR_UTF8           => 'Malformed UTF-8 characters, possibly incorrectly encoded'
    ];
    $error = json_last_error();

    return array_key_exists($error, $errors) ? $errors[$error] : "Unknown error ({$error})";
  }
}

//----------------------------------------------------------------------------------------------------------------------
/**
 * Starts the execution of this program.
 *
 * @param array $options The arguments of this program (i.e. $argv).
 */
function main($options)
{
  // Set error handler.
//  $handler = new ErrorHandler();
//  $handler->register();

  $setting = getSetting($options);

  $php_data_sync = new DataSync();

  $main_exec_status = $php_data_sync->main($setting);

  if ($main_exec_status!=0) exit($main_exec_status);

  exit(0);
}

//----------------------------------------------------------------------------------------------------------------------
main($argv);
